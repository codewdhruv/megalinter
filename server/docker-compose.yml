version: '3'
services:

  # Redis server to manage request queues and results
  megalinter_server_redis:
    image: redis:7.0.11-alpine
    ports:
      - "6379:6379"
    volumes:
      - ./redis:/data

  # Server to receive requests and post them in redis queue
  megalinter_server_api:
    image: megalinter-server:latest
    command: uvicorn server.server:app --host 0.0.0.0 --port 8000
    environment:
      - MEGALINTER_SERVER_REDIS_HOST=megalinter_server_redis
      - MEGALINTER_SERVER_REDIS_PORT=6379
      - MEGALINTER_SERVER_REDIS_QUEUE=megalinter:queue_requests
    ports:
      - "8000:8000"
    depends_on:
      - megalinter_server_redis
    links:
      - megalinter_server_redis

  # Worker to process requests and post results in redis stream or pubsub
  megalinter_server_worker:
    #image: ghcr.io/oxsecurity/megalinter-ci_light:alpha # ci_light is lighter
    image: ghcr.io/oxsecurity/megalinter-javascript:alpha # javascript projects
    #image: ghcr.io/oxsecurity/megalinter-cupcake:alpha # cupcake is more complete
    #image: ghcr.io/oxsecurity/megalinter:alpha # all linters
    environment:
      # Worker variables
      - MEGALINTER_SERVER=true
      - REDIS_LINTER_REPORTER=true
      - REDIS_LINTER_REPORTER_HOST=megalinter_server_redis
      - REDIS_LINTER_REPORTER_PORT=6379

      # Use either of the following variables groups depending you want to use redis stream messages or pubsub

      # Stream mode
      #- REDIS_LINTER_REPORTER_METHOD=STREAM
      #- REDIS_LINTER_REPORTER_STREAM=megalinter:stream_linter_results

      # PubSub mode
      - REDIS_LINTER_REPORTER_METHOD=PUBSUB
      - REDIS_LINTER_REPORTER_PUBSUB_CHANNEL=megalinter:channel_linter_results  # You can force a channel. If not set, megalinter:channel_linter_results:REQUEST_ID will be used
    depends_on:
      - megalinter_server_redis
    links:
      - megalinter_server_redis